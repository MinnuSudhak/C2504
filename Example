<Window x:Class="Registration.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Registration"
        mc:Ignorable="d"
        Title="Patient Registration" Height="450" Width="800">
    <Grid>
    <DockPanel Background="Orange">
        <!-- TabControl on top -->
        <TabControl Background="Wheat"  DockPanel.Dock="Top" Height="30">
            <TabItem Header="Patient" >
                
            </TabItem>
        </TabControl>

       
        <DockPanel LastChildFill="True">
            
            <StackPanel DockPanel.Dock="Left" Background="Wheat" Width="443" Margin="10" Height="338">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Patient Name " FontWeight="Bold" Margin="5"/>
                    <TextBox Name="txtPatientName" Margin="5" Width="200"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Patient ID " FontWeight="Bold" Margin="5"/>
                    <TextBox Name="txtPatientID" Margin="5" Width="200"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="DOB " FontWeight="Bold" Margin="5"/>
                    <DatePicker Name="Dob" Margin="5" Width="200"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Sex " FontWeight="Bold" Margin="5"/>
                    <RadioButton Background="Orange" Content="Male" Margin="5" Width="100"/>
                    <RadioButton  Background="Orange"  Content="Female" Margin="5" Width="100"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Place " FontWeight="Bold" Margin="5"/>
                    <ComboBox Width="284">
                        <ComboBoxItem Content="Trivandrum"/>
                        <ComboBoxItem Content="Ernakulam"/>
                    </ComboBox>
                </StackPanel>

                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Scheduled Date:" FontWeight="Bold" Margin="5"/>
                    <DatePicker Name="scheduledDatePicker" Margin="5" Width="200"/>
                </StackPanel>

            </StackPanel>

            <!-- Right frame: Buttons -->
            <StackPanel DockPanel.Dock="Right" Background="Wheat" Width="318" Margin="10" Height="335">
                <Button Style="{StaticResource ShadowButton}" Name="btnRegister" Background="Firebrick" Content="Register" Width="100" Margin="10" />
                <Button Style="{StaticResource ShadowButton}" Name="btnBackup" Content="Backup" Background="Firebrick" Width="100" Margin="10" HorizontalAlignment="Center" />
            </StackPanel>
        </DockPanel>
    </DockPanel>
    </Grid>
</Window>


converter.cs

using System;
using System.Globalization;
using System.Windows.Data;

namespace Registration.Converters
{
    public class GenderConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            string gender = value as string;
            string targetGender = parameter as string;

            if (!string.IsNullOrEmpty(gender) && !string.IsNullOrEmpty(targetGender))
            {
                return gender.Equals(targetGender, StringComparison.InvariantCultureIgnoreCase);
            }

            return false;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isChecked = (bool)value;
            string targetGender = parameter as string;

            if (isChecked && !string.IsNullOrEmpty(targetGender))
            {
                return targetGender;
            }

            return null;
        }
    }


viewmodel


using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

using System.Xml.Serialization;
using Registration.Commands;
using Registration.Model;

namespace Registration.View_Model
{
    public class PatientViewModel : BaseModel
    {
        private Patient _patient;
        private List<Patient> _patients;
        public PatientViewModel()
        {
            _patient = new Patient();
            _patients = new List<Patient>();
            RegisterCommand = new RelayCommand(Register);
            BackUpCommand = new RelayCommand(Backup);
            LoadPatient();
        }
        public Patient Patient
        {
            get { return _patient; }
            set
            {
                _patient = value;
                onPropertyChanged("Patient");
            }
        }
        public ICommand RegisterCommand { get; }
        public ICommand BackUpCommand { get;  }
        private void Register(object obj)
        {
            string filepath = "Patient_Details.xml";
            SavePatientData(filepath);
            LoadPatient();
            _patients.Add(_patient);
            _patient=new Patient();
            onPropertyChanged("Patient");
        }
        private void Backup(object obj)
        {
            string backfilepath = "Backup_Details.xml";
            SavePatientData(backfilepath);
            
        }
        private void SavePatientData(string filepath)
        {
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(List<Patient>));
                using (FileStream fs = new FileStream(filepath, FileMode.Create))
                {
                    serializer.Serialize(fs, _patients);
                }
                MessageBox.Show($"Contact is Saved");
            }
            catch (Exception ex)
            {
                MessageBox.Show(messageBoxText: $"{ex.Message}");
            }
        }
        private void LoadPatient()
        {
            string filepath = "Patient_Details.xml";
            if (File.Exists(filepath))
            {
                try
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<Patient>));
                    using (FileStream fs = new FileStream(filepath, FileMode.Open))
                    {
                        _patients = (List<Patient>)serializer.Deserialize(fs);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(messageBoxText: $"{ex.Message}");
                }
                
            }
            else
            {
                _patients=new List<Patient>();
            }
        }
    }
}
                
                



<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Orientation="Horizontal">
            <TextBlock Text="SID: " FontWeight="Bold" />
            <TextBlock Text="110cm" />
            <TextBlock Text="TOD: " FontWeight="Bold" Margin="20,0,0,0" />
            <TextBlock Text="26cm" />
        </StackPanel>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Canvas Grid.Column="0">
                <Ellipse Width="100" Height="50" Fill="Gray" Canvas.Left="50" Canvas.Top="100" />
                <Line Stroke="Black" X1="50" Y1="50" X2="150" Y2="200" Canvas.Left="50" Canvas.Top="100" />
                <Line Stroke="Black" X1="100" Y1="125" X2="150" Y2="125" StrokeDashArray="2 2" Canvas.Left="50" Canvas.Top="100" />
                <Ellipse Width="10" Height="10" Fill="Black" Canvas.Left="150" Canvas.Top="120" />
                <TextBlock Text="TOD" FontSize="10" Canvas.Left="160" Canvas.Top="120" />
            </Canvas>

            <Button Grid.Column="1" Content="Set" Margin="10" />
        </Grid>

        <StackPanel Grid.Row="2" Orientation="Horizontal">
            <TextBlock Text="PID: " FontWeight="Bold" />
            <TextBlock Text="50cm" />
        </StackPanel>
    </Grid>
</Window>
