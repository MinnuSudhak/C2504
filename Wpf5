using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

public class PluginDiscovery
{
    private const string PluginDirectory = "Plugins";

    public List<DiscoveredPlugin> DiscoverPlugins()
    {
        var plugins = new List<DiscoveredPlugin>();

        if (!Directory.Exists(PluginDirectory))
        {
            Directory.CreateDirectory(PluginDirectory);
        }

        foreach (var file in Directory.GetFiles(PluginDirectory, "*.dll"))
        {
            try
            {
                var assembly = Assembly.LoadFrom(file);
                foreach (var type in assembly.GetTypes())
                {
                    // Check if the type represents a plugin (e.g., implements a specific interface)
                    if (type.GetInterface("IPlugin") != null)
                    {
                        var plugin = new DiscoveredPlugin
                        {
                            Name = type.Name,
                            Fields = GetPluginFields(type)
                        };
                        plugins.Add(plugin);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading plugin {file}: {ex.Message}");
            }
        }

        return plugins;
    }

    private List<PluginField> GetPluginFields(Type pluginType)
    {
        var fields = new List<PluginField>();

        // Assume each plugin has a method or metadata to describe its fields
        var method = pluginType.GetMethod("GetFields");
        if (method != null)
        {
            var result = method.Invoke(null, null) as List<PluginField>;
            if (result != null)
            {
                fields.AddRange(result);
            }
        }

        return fields;
    }
}

public class DiscoveredPlugin
{
    public string Name { get; set; }
    public List<PluginField> Fields { get; set; }
}







private void LoadPluginsIntoComboBox()
{
    var pluginNames = _pluginManager.LoadPluginNames(); // Reads from XML
    PluginComboBox.ItemsSource = pluginNames;
}






private void UpdateUIForSelectedPlugin(string pluginName)
{
    InputFieldsPanel.Children.Clear();
    var fields = _pluginManager.LoadPluginFields(pluginName);

    foreach (var field in fields)
    {
        if (field.Type == "text" || field.Type == "number")
        {
            var textBox = new TextBox { Name = field.Label, Margin = new Thickness(5) };
            InputFieldsPanel.Children.Add(new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Children =
                {
                    new TextBlock { Text = field.Label, Width = 100 },
                    textBox
                }
            });
        }
        else if (field.Type == "dropdown" && field.Options != null)
        {
            var comboBox = new ComboBox
            {
                Name = field.Label,
                ItemsSource = field.Options,
                Margin = new Thickness(5)
            };
            InputFieldsPanel.Children.Add(new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Children =
                {
                    new TextBlock { Text = field.Label, Width = 100 },
                    comboBox
                }
            });
        }
    }
}




private void LoadPluginsIntoComboBox()
{
    var pluginNames = _pluginManager.LoadPluginNames(); // Reads from XML
    PluginComboBox.ItemsSource = pluginNames;
}







private void UpdateUIForSelectedPlugin(string pluginName)
{
    InputFieldsPanel.Children.Clear();
    var fields = _pluginManager.LoadPluginFields(pluginName);

    foreach (var field in fields)
    {
        if (field.Type == "text" || field.Type == "number")
        {
            var textBox = new TextBox { Name = field.Label, Margin = new Thickness(5) };
            InputFieldsPanel.Children.Add(new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Children =
                {
                    new TextBlock { Text = field.Label, Width = 100 },
                    textBox
                }
            });
        }
        else if (field.Type == "dropdown" && field.Options != null)
        {
            var comboBox = new ComboBox
            {
                Name = field.Label,
                ItemsSource = field.Options,
                Margin = new Thickness(5)
            };
            InputFieldsPanel.Children.Add(new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Children =
                {
                    new TextBlock { Text = field.Label, Width = 100 },
                    comboBox
                }
            });
        }
    }
}







private void VerifyPlugin_Click(object sender, RoutedEventArgs e)
{
    if (PluginComboBox.SelectedItem == null)
    {
        MessageBox.Show("Please select a plugin.");
        return;
    }

    string selectedPlugin = PluginComboBox.SelectedItem.ToString();
    var fields = _pluginManager.LoadPluginFields(selectedPlugin);

    var inputValues = new Dictionary<string, string>();
    foreach (var field in fields)
    {
        var inputControl = InputFieldsPanel.Children
                                           .OfType<StackPanel>()
                                           .FirstOrDefault(sp => sp.Children.OfType<TextBlock>().Any(tb => tb.Text == field.Label));

        if (field.Type == "text" || field.Type == "number")
        {
            var textBox = inputControl?.Children.OfType<TextBox>().FirstOrDefault();
            inputValues[field.Label] = textBox?.Text;
        }
        else if (field.Type == "dropdown")
        {
            var comboBox = inputControl?.Children.OfType<ComboBox>().FirstOrDefault();
            inputValues[field.Label] = comboBox?.SelectedItem?.ToString();
        }
    }

    // Pass inputValues to the plugin logic
    MessageBox.Show($"Inputs for {selectedPlugin}: {string.Join(", ", inputValues.Select(kvp => $"{kvp.Key}: {kvp.Value}"))}");
}
