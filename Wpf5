using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

public class PluginDiscovery
{
    private const string PluginDirectory = "Plugins";

    public List<DiscoveredPlugin> DiscoverPlugins()
    {
        var plugins = new List<DiscoveredPlugin>();

        if (!Directory.Exists(PluginDirectory))
        {
            Directory.CreateDirectory(PluginDirectory);
        }

        foreach (var file in Directory.GetFiles(PluginDirectory, "*.dll"))
        {
            try
            {
                var assembly = Assembly.LoadFrom(file);
                foreach (var type in assembly.GetTypes())
                {
                    // Check if the type represents a plugin (e.g., implements a specific interface)
                    if (type.GetInterface("IPlugin") != null)
                    {
                        var plugin = new DiscoveredPlugin
                        {
                            Name = type.Name,
                            Fields = GetPluginFields(type)
                        };
                        plugins.Add(plugin);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading plugin {file}: {ex.Message}");
            }
        }

        return plugins;
    }

    private List<PluginField> GetPluginFields(Type pluginType)
    {
        var fields = new List<PluginField>();

        // Assume each plugin has a method or metadata to describe its fields
        var method = pluginType.GetMethod("GetFields");
        if (method != null)
        {
            var result = method.Invoke(null, null) as List<PluginField>;
            if (result != null)
            {
                fields.AddRange(result);
            }
        }

        return fields;
    }
}

public class DiscoveredPlugin
{
    public string Name { get; set; }
    public List<PluginField> Fields { get; set; }
}







private void LoadPluginsIntoComboBox()
{
    var pluginNames = _pluginManager.LoadPluginNames(); // Reads from XML
    PluginComboBox.ItemsSource = pluginNames;
}






private void UpdateUIForSelectedPlugin(string pluginName)
{
    InputFieldsPanel.Children.Clear();
    var fields = _pluginManager.LoadPluginFields(pluginName);

    foreach (var field in fields)
    {
        if (field.Type == "text" || field.Type == "number")
        {
            var textBox = new TextBox { Name = field.Label, Margin = new Thickness(5) };
            InputFieldsPanel.Children.Add(new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Children =
                {
                    new TextBlock { Text = field.Label, Width = 100 },
                    textBox
                }
            });
        }
        else if (field.Type == "dropdown" && field.Options != null)
        {
            var comboBox = new ComboBox
            {
                Name = field.Label,
                ItemsSource = field.Options,
                Margin = new Thickness(5)
            };
            InputFieldsPanel.Children.Add(new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Children =
                {
                    new TextBlock { Text = field.Label, Width = 100 },
                    comboBox
                }
            });
        }
    }
}




private void LoadPluginsIntoComboBox()
{
    var pluginNames = _pluginManager.LoadPluginNames(); // Reads from XML
    PluginComboBox.ItemsSource = pluginNames;
}







private void UpdateUIForSelectedPlugin(string pluginName)
{
    InputFieldsPanel.Children.Clear();
    var fields = _pluginManager.LoadPluginFields(pluginName);

    foreach (var field in fields)
    {
        if (field.Type == "text" || field.Type == "number")
        {
            var textBox = new TextBox { Name = field.Label, Margin = new Thickness(5) };
            InputFieldsPanel.Children.Add(new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Children =
                {
                    new TextBlock { Text = field.Label, Width = 100 },
                    textBox
                }
            });
        }
        else if (field.Type == "dropdown" && field.Options != null)
        {
            var comboBox = new ComboBox
            {
                Name = field.Label,
                ItemsSource = field.Options,
                Margin = new Thickness(5)
            };
            InputFieldsPanel.Children.Add(new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Children =
                {
                    new TextBlock { Text = field.Label, Width = 100 },
                    comboBox
                }
            });
        }
    }
}







private void VerifyPlugin_Click(object sender, RoutedEventArgs e)
{
    if (PluginComboBox.SelectedItem == null)
    {
        MessageBox.Show("Please select a plugin.");
        return;
    }

    string selectedPlugin = PluginComboBox.SelectedItem.ToString();
    var fields = _pluginManager.LoadPluginFields(selectedPlugin);

    var inputValues = new Dictionary<string, string>();
    foreach (var field in fields)
    {
        var inputControl = InputFieldsPanel.Children
                                           .OfType<StackPanel>()
                                           .FirstOrDefault(sp => sp.Children.OfType<TextBlock>().Any(tb => tb.Text == field.Label));

        if (field.Type == "text" || field.Type == "number")
        {
            var textBox = inputControl?.Children.OfType<TextBox>().FirstOrDefault();
            inputValues[field.Label] = textBox?.Text;
        }
        else if (field.Type == "dropdown")
        {
            var comboBox = inputControl?.Children.OfType<ComboBox>().FirstOrDefault();
            inputValues[field.Label] = comboBox?.SelectedItem?.ToString();
        }
    }

    // Pass inputValues to the plugin logic
    MessageBox.Show($"Inputs for {selectedPlugin}: {string.Join(", ", inputValues.Select(kvp => $"{kvp.Key}: {kvp.Value}"))}");
}










using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

namespace DynamicPluginApp
{
    public partial class MainWindow : Window
    {
        private PluginManager _pluginManager;
        private PluginDiscovery _pluginDiscovery;

        public MainWindow()
        {
            InitializeComponent();
            _pluginManager = new PluginManager();
            _pluginDiscovery = new PluginDiscovery();

            // Discover plugins and update XML
            var discoveredPlugins = _pluginDiscovery.DiscoverPlugins();
            _pluginManager.UpdateXmlWithDiscoveredPlugins(discoveredPlugins);

            // Load plugins into ComboBox
            LoadPluginsIntoComboBox();
        }

        private void LoadPluginsIntoComboBox()
        {
            var pluginNames = _pluginManager.LoadPluginNames();
            PluginComboBox.ItemsSource = pluginNames;
        }

        private void PluginComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (PluginComboBox.SelectedItem == null) return;

            string selectedPlugin = PluginComboBox.SelectedItem.ToString();
            UpdateUIForSelectedPlugin(selectedPlugin);
        }

        private void UpdateUIForSelectedPlugin(string pluginName)
        {
            InputFieldsPanel.Children.Clear();
            var fields = _pluginManager.LoadPluginFields(pluginName);

            foreach (var field in fields)
            {
                if (field.Type == "text" || field.Type == "number")
                {
                    var textBox = new TextBox { Name = field.Label, Margin = new Thickness(5) };
                    InputFieldsPanel.Children.Add(new StackPanel
                    {
                        Orientation = Orientation.Horizontal,
                        Children =
                        {
                            new TextBlock { Text = field.Label, Width = 100 },
                            textBox
                        }
                    });
                }
                else if (field.Type == "dropdown" && field.Options != null)
                {
                    var comboBox = new ComboBox
                    {
                        Name = field.Label,
                        ItemsSource = field.Options,
                        Margin = new Thickness(5)
                    };
                    InputFieldsPanel.Children.Add(new StackPanel
                    {
                        Orientation = Orientation.Horizontal,
                        Children =
                        {
                            new TextBlock { Text = field.Label, Width = 100 },
                            comboBox
                        }
                    });
                }
            }
        }

        private void VerifyPlugin_Click(object sender, RoutedEventArgs e)
        {
            if (PluginComboBox.SelectedItem == null)
            {
                MessageBox.Show("Please select a plugin.");
                return;
            }

            string selectedPlugin = PluginComboBox.SelectedItem.ToString();
            var fields = _pluginManager.LoadPluginFields(selectedPlugin);

            var inputValues = new Dictionary<string, string>();
            foreach (var field in fields)
            {
                var inputControl = InputFieldsPanel.Children
                                                   .OfType<StackPanel>()
                                                   .FirstOrDefault(sp => sp.Children.OfType<TextBlock>().Any(tb => tb.Text == field.Label));

                if (field.Type == "text" || field.Type == "number")
                {
                    var textBox = inputControl?.Children.OfType<TextBox>().FirstOrDefault();
                    inputValues[field.Label] = textBox?.Text;
                }
                else if (field.Type == "dropdown")
                {
                    var comboBox = inputControl?.Children.OfType<ComboBox>().FirstOrDefault();
                    inputValues[field.Label] = comboBox?.SelectedItem?.ToString();
                }
            }

            MessageBox.Show($"Inputs for {selectedPlugin}: {string.Join(", ", inputValues.Select(kvp => $"{kvp.Key}: {kvp.Value}"))}");
        }
    }
}






using System.Collections.Generic;
using System.Xml.Linq;

public class PluginManager
{
    private const string XmlFilePath = "Plugins.xml";

    public void UpdateXmlWithDiscoveredPlugins(List<PluginMetadata> plugins)
    {
        // Load or create the XML file
        XElement root;
        if (System.IO.File.Exists(XmlFilePath))
        {
            root = XElement.Load(XmlFilePath);
        }
        else
        {
            root = new XElement("Plugins");
        }

        // Update XML with discovered plugins
        foreach (var plugin in plugins)
        {
            // Check if plugin already exists in the XML
            var existingPlugin = root.Elements("Plugin")
                                      .FirstOrDefault(p => p.Attribute("Name")?.Value == plugin.Name);

            if (existingPlugin == null)
            {
                // Add new plugin to XML
                var pluginElement = new XElement("Plugin",
                    new XAttribute("Name", plugin.Name),
                    plugin.Fields.Select(field =>
                        new XElement("Field",
                            new XAttribute("Label", field.Label),
                            new XAttribute("Type", field.Type),
                            field.Options != null
                                ? new XElement("Options", field.Options.Select(o => new XElement("Option", o)))
                                : null
                        )
                    )
                );

                root.Add(pluginElement);
            }
        }

        // Save the updated XML
        root.Save(XmlFilePath);
    }

    public List<string> LoadPluginNames()
    {
        if (!System.IO.File.Exists(XmlFilePath)) return new List<string>();

        var root = XElement.Load(XmlFilePath);
        return root.Elements("Plugin")
                   .Select(p => p.Attribute("Name")?.Value)
                   .Where(name => !string.IsNullOrEmpty(name))
                   .ToList();
    }

    public List<PluginField> LoadPluginFields(string pluginName)
    {
        if (!System.IO.File.Exists(XmlFilePath)) return new List<PluginField>();

        var root = XElement.Load(XmlFilePath);
        var plugin = root.Elements("Plugin")
                         .FirstOrDefault(p => p.Attribute("Name")?.Value == pluginName);

        if (plugin == null) return new List<PluginField>();

        return plugin.Elements("Field")
                     .Select(f => new PluginField
                     {
                         Label = f.Attribute("Label")?.Value,
                         Type = f.Attribute("Type")?.Value,
                         Options = f.Element("Options")?.Elements("Option").Select(o => o.Value).ToList()
                     })
                     .ToList();
    }
}

public class PluginMetadata
{
    public string Name { get; set; }
    public List<PluginField> Fields { get; set; }
}

public class PluginField
{
    public string Label { get; set; }
    public string Type { get; set; }
    public List<string> Options { get; set; }
}
