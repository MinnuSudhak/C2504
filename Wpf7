using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;

namespace DynamicPluginApp
{
    public partial class MainWindow : Window
    {
        private string pluginFolder = @"C:\Path\To\Your\ImageProcess"; // Path to your ImageProcess folder

        public MainWindow()
        {
            InitializeComponent();
            LoadPluginNamesFromFolders();
        }

        // Load plugin folder names into ComboBox
        private void LoadPluginNamesFromFolders()
        {
            try
            {
                if (!Directory.Exists(pluginFolder))
                {
                    MessageBox.Show($"Plugin folder not found: {pluginFolder}");
                    return;
                }

                var pluginDirectories = Directory.GetDirectories(pluginFolder);
                var pluginNames = pluginDirectories.Select(dir => new DirectoryInfo(dir).Name).ToList();

                PluginComboBox.ItemsSource = pluginNames;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading plugins: {ex.Message}");
            }
        }

        // Handle plugin selection and update UI
        private void PluginComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (PluginComboBox.SelectedItem == null) return;

            string selectedPluginName = PluginComboBox.SelectedItem.ToString();
            string selectedPluginPath = Path.Combine(pluginFolder, selectedPluginName, $"{selectedPluginName}.dll");

            if (File.Exists(selectedPluginPath))
            {
                // Read plugin fields and update UI
                var pluginFields = GetPluginFields(selectedPluginPath);
                UpdateUIForFields(pluginFields);
            }
            else
            {
                MessageBox.Show($"DLL file for {selectedPluginName} not found.");
            }
        }

        // Use reflection to read plugin fields
        private Dictionary<string, string> GetPluginFields(string pluginPath)
        {
            var fields = new Dictionary<string, string>();

            try
            {
                var assembly = Assembly.LoadFrom(pluginPath);
                var pluginType = assembly.GetTypes().FirstOrDefault(); // Assuming one main class per plugin

                if (pluginType != null)
                {
                    foreach (var property in pluginType.GetProperties())
                    {
                        fields[property.Name] = property.PropertyType.Name; // Field name and type
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading plugin fields: {ex.Message}");
            }

            return fields;
        }

        // Dynamically update the UI with input fields
        private void UpdateUIForFields(Dictionary<string, string> fields)
        {
            InputFieldsPanel.Children.Clear(); // Clear existing fields

            foreach (var field in fields)
            {
                var fieldType = field.Value.ToLower();

                if (fieldType == "string")
                {
                    // TextBox for string input
                    var textBox = new TextBox { Name = field.Key, Margin = new Thickness(5) };
                    InputFieldsPanel.Children.Add(new StackPanel
                    {
                        Orientation = Orientation.Horizontal,
                        Children =
                        {
                            new TextBlock { Text = field.Key, Width = 150 },
                            textBox
                        }
                    });
                }
                else if (fieldType == "int" || fieldType == "double" || fieldType == "float")
                {
                    // TextBox for numeric input
                    var textBox = new TextBox { Name = field.Key, Margin = new Thickness(5) };
                    InputFieldsPanel.Children.Add(new StackPanel
                    {
                        Orientation = Orientation.Horizontal,
                        Children =
                        {
                            new TextBlock { Text = field.Key, Width = 150 },
                            textBox
                        }
                    });
                }
                else if (fieldType == "bool")
                {
                    // CheckBox for boolean input
                    var checkBox = new CheckBox { Name = field.Key, Margin = new Thickness(5) };
                    InputFieldsPanel.Children.Add(new StackPanel
                    {
                        Orientation = Orientation.Horizontal,
                        Children =
                        {
                            new TextBlock { Text = field.Key, Width = 150 },
                            checkBox
                        }
                    });
                }
            }
        }

        // Collect user inputs dynamically
        private void VerifyPlugin_Click(object sender, RoutedEventArgs e)
        {
            if (PluginComboBox.SelectedItem == null)
            {
                MessageBox.Show("Please select a plugin.");
                return;
            }

            string selectedPluginName = PluginComboBox.SelectedItem.ToString();
            var inputValues = new Dictionary<string, string>();

            foreach (var child in InputFieldsPanel.Children.OfType<StackPanel>())
            {
                var label = child.Children.OfType<TextBlock>().FirstOrDefault()?.Text;

                if (label != null)
                {
                    if (child.Children.OfType<TextBox>().Any())
                    {
                        var textBox = child.Children.OfType<TextBox>().FirstOrDefault();
                        inputValues[label] = textBox?.Text;
                    }
                    else if (child.Children.OfType<CheckBox>().Any())
                    {
                        var checkBox = child.Children.OfType<CheckBox>().FirstOrDefault();
                        inputValues[label] = checkBox?.IsChecked.ToString();
                    }
                }
            }

            MessageBox.Show($"Inputs for {selectedPluginName}: {string.Join(", ", inputValues.Select(kvp => $"{kvp.Key}: {kvp.Value}"))}");
        }
    }
}
