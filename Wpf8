<Window x:Class="DynamicPluginApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Dynamic Plugin App" Height="450" Width="800">
    <Grid>
        <StackPanel Margin="10" VerticalAlignment="Top">
            <Label Content="Select Plugin:" FontWeight="Bold" />
            <ComboBox x:Name="PluginComboBox" Width="300" SelectionChanged="PluginComboBox_SelectionChanged" />

            <Label Content="Input Fields:" FontWeight="Bold" Margin="0,20,0,0" />
            <StackPanel x:Name="InputFieldsPanel" />

            <Label Content="Input Data:" FontWeight="Bold" Margin="0,20,0,0" />
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                <TextBox x:Name="FilePathTextBox" Width="400" Margin="0,0,10,0" />
                <Button Content="Browse" Click="BrowseFile_Click" Margin="0,0,10,0" />
                <Button Content="Display" Click="DisplayFile_Click" />
            </StackPanel>
        </StackPanel>
    </Grid>
</Window>




using Microsoft.Win32;
using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;

namespace DynamicPluginApp
{
    public partial class MainWindow : Window
    {
        private string pluginFolder = @"C:\Path\To\Your\ImageProcess"; // Path to your ImageProcess folder

        public MainWindow()
        {
            InitializeComponent();
            LoadPluginNamesFromFolders();
        }

        private void LoadPluginNamesFromFolders()
        {
            if (!Directory.Exists(pluginFolder))
            {
                MessageBox.Show($"Plugin folder not found: {pluginFolder}");
                return;
            }

            var pluginDirectories = Directory.GetDirectories(pluginFolder);
            var pluginNames = pluginDirectories.Select(dir => new DirectoryInfo(dir).Name).ToList();

            PluginComboBox.ItemsSource = pluginNames;
        }

        private void PluginComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (PluginComboBox.SelectedItem == null) return;

            string selectedPluginName = PluginComboBox.SelectedItem.ToString();
            string selectedPluginPath = Path.Combine(pluginFolder, selectedPluginName, $"{selectedPluginName}.dll");

            if (!File.Exists(selectedPluginPath))
            {
                MessageBox.Show($"DLL file not found: {selectedPluginPath}");
                return;
            }

            try
            {
                var pluginFields = GetPluginFields(selectedPluginPath);
                UpdateUIForFields(pluginFields);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading plugin: {ex.Message}");
            }
        }

        private Dictionary<string, string> GetPluginFields(string pluginPath)
        {
            var fields = new Dictionary<string, string>();

            try
            {
                var assembly = Assembly.LoadFrom(pluginPath);
                var pluginType = assembly.GetTypes().FirstOrDefault(type => type.IsClass && !type.IsAbstract);

                if (pluginType != null)
                {
                    foreach (var property in pluginType.GetProperties())
                    {
                        fields[property.Name] = property.PropertyType.Name;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading fields from plugin: {ex.Message}");
            }

            return fields;
        }

        private void UpdateUIForFields(Dictionary<string, string> fields)
        {
            InputFieldsPanel.Children.Clear();

            foreach (var field in fields)
            {
                var fieldType = field.Value.ToLower();

                if (fieldType == "string")
                {
                    var textBox = new TextBox { Name = field.Key, Margin = new Thickness(5) };
                    InputFieldsPanel.Children.Add(new StackPanel
                    {
                        Orientation = Orientation.Horizontal,
                        Children =
                        {
                            new TextBlock { Text = field.Key, Width = 150 },
                            textBox
                        }
                    });
                }
                else if (fieldType == "int" || fieldType == "double" || fieldType == "float")
                {
                    var textBox = new TextBox { Name = field.Key, Margin = new Thickness(5) };
                    InputFieldsPanel.Children.Add(new StackPanel
                    {
                        Orientation = Orientation.Horizontal,
                        Children =
                        {
                            new TextBlock { Text = field.Key, Width = 150 },
                            textBox
                        }
                    });
                }
                else if (fieldType == "bool")
                {
                    var checkBox = new CheckBox { Name = field.Key, Margin = new Thickness(5) };
                    InputFieldsPanel.Children.Add(new StackPanel
                    {
                        Orientation = Orientation.Horizontal,
                        Children =
                        {
                            new TextBlock { Text = field.Key, Width = 150 },
                            checkBox
                        }
                    });
                }
            }
        }

        private void BrowseFile_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new OpenFileDialog
            {
                Title = "Select a File",
                Filter = "All Files|*.*"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                FilePathTextBox.Text = openFileDialog.FileName;
            }
        }

        private void DisplayFile_Click(object sender, RoutedEventArgs e)
        {
            string filePath = FilePathTextBox.Text;

            if (string.IsNullOrEmpty(filePath) || !File.Exists(filePath))
            {
                MessageBox.Show("Please select a valid file.");
                return;
            }

            var displayWindow = new DisplayWindow(filePath);
            displayWindow.Show();
        }
    }
}






using System.IO;
using System.Windows;

namespace DynamicPluginApp
{
    public partial class DisplayWindow : Window
    {
        public DisplayWindow(string filePath)
        {
            InitializeComponent();
            DisplayFileContent(filePath);
        }

        private void DisplayFileContent(string filePath)
        {
            try
            {
                FileContentTextBox.Text = File.ReadAllText(filePath);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error displaying file content: {ex.Message}");
            }
        }
    }
}


<Window x:Class="DynamicPluginApp.DisplayWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Display File" Height="450" Width="800">
    <Grid>
        <TextBox x:Name="FileContentTextBox" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" 
                 IsReadOnly="True" TextWrapping="Wrap" Margin="10"/>
    </Grid>
</Window>










private void BrowseFile_Click(object sender, RoutedEventArgs e)
        {
            // Open file dialog to browse files
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Title = "Select a File";
            openFileDialog.Filter = "All Files (*.*)|*.*";

            // Show dialog and if file is selected, set the text box value
            if (openFileDialog.ShowDialog() == true)
            {
                FilePathTextBox.Text = openFileDialog.FileName;
            }
        }

        private void DisplayFile_Click(object sender, RoutedEventArgs e)
        {
            string filePath = FilePathTextBox.Text;

            if (string.IsNullOrEmpty(filePath) || !File.Exists(filePath))
            {
                MessageBox.Show("Please select a valid file.");
                return;
            }
var displayWindow = new DisplayWindow(filePath);
            displayWindow.Show();
        }
    }
}
