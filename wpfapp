
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 15
VisualStudioVersion = 15.0.28307.168
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "WpfApp1", "WpfApp1\WpfApp1.csproj", "{120AD698-09A7-4310-9680-B7A3B525A169}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "plugin", "plugin", "{084FBBEB-27C9-4A44-A8F2-F0DF4B4FA7FC}"
	ProjectSection(SolutionItems) = preProject
		RFAngle.cs = RFAngle.cs

	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "plugin param", "plugin param", "{F6EBE7CF-1700-4E17-89C1-63142C17A002}"
	ProjectSection(SolutionItems) = preProject
		RFArrow.cs = RFArrow.cs
	EndProjectSection
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{120AD698-09A7-4310-9680-B7A3B525A169}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{120AD698-09A7-4310-9680-B7A3B525A169}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{120AD698-09A7-4310-9680-B7A3B525A169}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{120AD698-09A7-4310-9680-B7A3B525A169}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {73C9AAA3-7C87-4817-8929-6A623A93C679}
	EndGlobalSection
EndGlobal




using System;
using System.IO;

class SolutionFileUpdater
{
    static void Main()
    {
        string solutionFilePath = @"C:\Path\To\YourSolution.sln"; // Update the solution file path
        string pluginParamFolder = @"..\plugin param";  // Relative path to plugin param folder
        string pluginFolder = @"..\plugin"; // Relative path to plugin folder

        // Read the solution file content
        string[] lines = File.ReadAllLines(solutionFilePath);
        bool inPluginParamSection = false;
        bool inPluginSection = false;

        // Process each line in the .sln file
        for (int i = 0; i < lines.Length; i++)
        {
            // Detect when we enter the "plugin param" project section
            if (lines[i].Contains("Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"plugin param\""))
            {
                inPluginParamSection = true;
            }
            // Detect when we enter the "plugin" project section
            else if (lines[i].Contains("Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"plugin\""))
            {
                inPluginSection = true;
            }

            // If we are in the "plugin param" project section, look for .cs files
            if (inPluginParamSection && lines[i].Contains(".cs"))
            {
                // Replace the path to point to the plugin folder instead of plugin param
                if (lines[i].Contains(pluginParamFolder))
                {
                    lines[i] = lines[i].Replace(pluginParamFolder, pluginFolder);
                }
            }

            // If we encounter the end of a project section, reset flags
            if (lines[i].Contains("EndProjectSection"))
            {
                if (inPluginParamSection)
                {
                    inPluginParamSection = false;
                }
                else if (inPluginSection)
                {
                    inPluginSection = false;
                }
            }
        }

        // Save the updated solution file
        File.WriteAllLines(solutionFilePath, lines);

        Console.WriteLine("Solution file updated successfully.");
    }
}








using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Windows;

namespace PluginCreatorFeasibility
{
    public class TemplateCreationManager
    {
        const string PLPluginTemplatePath = @"..\..\..\PluginTemplate\PLPluginTemplate";
        const string IPPluginTemplatePath = @"..\..\..\PluginTemplate\IPPluginTemplate";
        const string IPPluginParamTemplatePath = @"..\..\..\PluginTemplate\IPPluginParamTemplate";
        const string PLTemplateName = "PLPlugintemplate";
        const string IPTemplateName = "IPPlugintemplate";
        const string IPParamTemplateName = "IPPluginParamtemplate";

        const string PLPluginProjectPath = @"..\..\..\PresentationLayer\Plugin\";
        const string IPPluginProjectPath = @"..\..\..\ImageProcess\Plugin\";
        const string IPPluginParamProjectPath = @"..\..\..\ImageProcess\PluginParam\";
        const string solutionPath = @"..\..\..\PluginCreatorFeasibility.sln";

        /// <summary>
        /// Constructor
        /// </summary>
        public TemplateCreationManager()
        {
            AddPluginTemplate();
        }

        /// <summary>
        /// 
        /// </summary>
        private void AddPluginTemplate()
        {
            bool plTemplate, ipTemplate, ipParamTemplate = false;

            if (!CheckPluginTemplate(out plTemplate, out ipTemplate, out ipParamTemplate))
            {
                if (!plTemplate)
                {
                    RegisterPluginTemplate(PLPluginTemplatePath);
                }

                if (!ipTemplate)
                {
                    RegisterPluginTemplate(IPPluginTemplatePath);
                }

                if (!ipParamTemplate)
                {
                    RegisterPluginTemplate(IPPluginParamTemplatePath);
                }
            }
        }

        private bool CheckPluginTemplate(out bool isPLTemplateAvailable, out bool isIPTemplateAvailable,
            out bool isIPParamTemplateAvailable)
        {
            isPLTemplateAvailable = isIPTemplateAvailable = isIPParamTemplateAvailable = false;

            try
            {
                ProcessStartInfo processStartInfo = new ProcessStartInfo
                {
                    FileName = "dotnet",
                    Arguments = "new --list",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (Process process = new Process
                {
                    StartInfo = processStartInfo
                })
                {
                    process.Start();
                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    process.WaitForExit();

                    if (output.Contains(PLTemplateName))
                    {
                        isPLTemplateAvailable = true;
                    }
                    if (output.Contains(IPTemplateName))
                    {
                        isIPTemplateAvailable = true;
                    }
                    if (output.Contains(IPParamTemplateName))
                    {
                        isIPParamTemplateAvailable = true;
                    }

                    if (!string.IsNullOrEmpty(error))
                    {
                        MessageBox.Show(error);
                        return false;
                    }

                    if (!isPLTemplateAvailable || !isIPTemplateAvailable || !isIPParamTemplateAvailable)
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return false;
            }
            return true;
        }

        private bool RegisterPluginTemplate(string templatePath)
        {
            string command = "dotnet";
            string arugument = $"new --install {templatePath}";
            return ExecuteCommand(command, arugument);
        }

        private bool ExecuteCommand(string command, string argument)
        {
            var startInfo = new ProcessStartInfo
            {
                FileName = command,
                Arguments = argument,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (var process = new Process { StartInfo = startInfo })
            {
                try
                {
                    process.Start();

                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    process.WaitForExit();

                    if (!string.IsNullOrEmpty(error))
                    {
                        MessageBox.Show(error, "Error");
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Catch");
                    return false;
                }
            }
            return true;
        }

        public string CreateProject(string projectName)
        {
            string result = string.Empty;

            // Create PL plugin project
            if (!CreatePLPluginProject(projectName))
            {
                result = "PL Plugin project Creation Failed";
            }

            // Create IP plugin project
            if (!CreateIPPluginProject(projectName))
            {
                result = "IP Plugin project Creation Failed";
            }

            // Create IP plugin param project
            if (!CreateIPPluginParamProject(projectName))
            {
                result = "IP Plugin param project Creation Failed";
            }

            return result;
        }

        private bool CreatePLPluginProject(string projectName)
        {
            string command = "dotnet";
            string createArgument = $@"new {PLTemplateName} -o {PLPluginProjectPath}{projectName} -C {{{Guid.NewGuid()}}}";
            string addToSolutionArgument = $"sln {solutionPath} add {PLPluginProjectPath}{projectName}\\{projectName}.csproj";
            try
            {
                ExecuteCommand(command, createArgument);
                ExecuteCommand(command, addToSolutionArgument);
                return true;
            }
            catch
            {
                return false;
            }
        }

        private bool CreateIPPluginProject(string projectName)
        {
            string command = "dotnet";
            string createArgument = $@"new {IPTemplateName} -o {IPPluginProjectPath}{projectName} -C {{{Guid.NewGuid()}}}";
            string addToSolutionArgument = $"sln {solutionPath} add {IPPluginProjectPath}{projectName}\\{projectName}.csproj";
            try
            {
                ExecuteCommand(command, createArgument);
                ExecuteCommand(command, addToSolutionArgument);
                return true;
            }
            catch
            {
                return false;
            }
        }

        private bool CreateIPPluginParamProject(string projectName)
        {
            string command = "dotnet";
            string createArgument = $@"new {IPParamTemplateName} -o {IPPluginParamProjectPath}{projectName}Param -C {{{Guid.NewGuid()}}}";
            string addToSolutionArgument = $"sln {solutionPath} add {IPPluginParamProjectPath}{projectName}Param\\{projectName}Param.csproj";
            try
            {
                ExecuteCommand(command, createArgument);
                ExecuteCommand(command, addToSolutionArgument);
                return true;
            }
            catch
            {
                return false;
            }
        }
    }
}

