
 




        








using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Windows;

namespace PluginCreatorFeasibility
{
    public class TemplateCreationManager
    {
        const string PLPluginTemplatePath = @"..\..\..\PluginTemplate\PLPluginTemplate";
        const string IPPluginTemplatePath = @"..\..\..\PluginTemplate\IPPluginTemplate";
        const string IPPluginParamTemplatePath = @"..\..\..\PluginTemplate\IPPluginParamTemplate";
        const string PLTemplateName = "PLPlugintemplate";
        const string IPTemplateName = "IPPlugintemplate";
        const string IPParamTemplateName = "IPPluginParamtemplate";

        const string PLPluginProjectPath = @"..\..\..\PresentationLayer\Plugin\";
        const string IPPluginProjectPath = @"..\..\..\ImageProcess\Plugin\";
        const string IPPluginParamProjectPath = @"..\..\..\ImageProcess\PluginParam\";
        const string solutionPath = @"..\..\..\PluginCreatorFeasibility.sln";

        /// <summary>
        /// Constructor
        /// </summary>
        public TemplateCreationManager()
        {
            AddPluginTemplate();
        }

        /// <summary>
        /// 
        /// </summary>
        private void AddPluginTemplate()
        {
            bool plTemplate, ipTemplate, ipParamTemplate = false;

            if (!CheckPluginTemplate(out plTemplate, out ipTemplate, out ipParamTemplate))
            {
                if (!plTemplate)
                {
                    RegisterPluginTemplate(PLPluginTemplatePath);
                }

                if (!ipTemplate)
                {
                    RegisterPluginTemplate(IPPluginTemplatePath);
                }

                if (!ipParamTemplate)
                {
                    RegisterPluginTemplate(IPPluginParamTemplatePath);
                }
            }
        }

        private bool CheckPluginTemplate(out bool isPLTemplateAvailable, out bool isIPTemplateAvailable,
            out bool isIPParamTemplateAvailable)
        {
            isPLTemplateAvailable = isIPTemplateAvailable = isIPParamTemplateAvailable = false;

            try
            {
                ProcessStartInfo processStartInfo = new ProcessStartInfo
                {
                    FileName = "dotnet",
                    Arguments = "new --list",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (Process process = new Process
                {
                    StartInfo = processStartInfo
                })
                {
                    process.Start();
                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    process.WaitForExit();

                    if (output.Contains(PLTemplateName))
                    {
                        isPLTemplateAvailable = true;
                    }
                    if (output.Contains(IPTemplateName))
                    {
                        isIPTemplateAvailable = true;
                    }
                    if (output.Contains(IPParamTemplateName))
                    {
                        isIPParamTemplateAvailable = true;
                    }

                    if (!string.IsNullOrEmpty(error))
                    {
                        MessageBox.Show(error);
                        return false;
                    }

                    if (!isPLTemplateAvailable || !isIPTemplateAvailable || !isIPParamTemplateAvailable)
                    {
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return false;
            }
            return true;
        }

        private bool RegisterPluginTemplate(string templatePath)
        {
            string command = "dotnet";
            string arugument = $"new --install {templatePath}";
            return ExecuteCommand(command, arugument);
        }

        private bool ExecuteCommand(string command, string argument)
        {
            var startInfo = new ProcessStartInfo
            {
                FileName = command,
                Arguments = argument,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (var process = new Process { StartInfo = startInfo })
            {
                try
                {
                    process.Start();

                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    process.WaitForExit();

                    if (!string.IsNullOrEmpty(error))
                    {
                        MessageBox.Show(error, "Error");
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Catch");
                    return false;
                }
            }
            return true;
        }

        public string CreateProject(string projectName)
        {
            string result = string.Empty;

            // Create PL plugin project
            if (!CreatePLPluginProject(projectName))
            {
                result = "PL Plugin project Creation Failed";
            }

            // Create IP plugin project
            if (!CreateIPPluginProject(projectName))
            {
                result = "IP Plugin project Creation Failed";
            }

            // Create IP plugin param project
            if (!CreateIPPluginParamProject(projectName))
            {
                result = "IP Plugin param project Creation Failed";
            }

            return result;
        }

        private bool CreatePLPluginProject(string projectName)
        {
            string command = "dotnet";
            string createArgument = $@"new {PLTemplateName} -o {PLPluginProjectPath}{projectName} -C {{{Guid.NewGuid()}}}";
            string addToSolutionArgument = $"sln {solutionPath} add {PLPluginProjectPath}{projectName}\\{projectName}.csproj";
            try
            {
                ExecuteCommand(command, createArgument);
                ExecuteCommand(command, addToSolutionArgument);
                return true;
            }
            catch
            {
                return false;
            }
        }

        private bool CreateIPPluginProject(string projectName)
        {
            string command = "dotnet";
            string createArgument = $@"new {IPTemplateName} -o {IPPluginProjectPath}{projectName} -C {{{Guid.NewGuid()}}}";
            string addToSolutionArgument = $"sln {solutionPath} add {IPPluginProjectPath}{projectName}\\{projectName}.csproj";
            try
            {
                ExecuteCommand(command, createArgument);
                ExecuteCommand(command, addToSolutionArgument);
                return true;
            }
            catch
            {
                return false;
            }
        }

        private bool CreateIPPluginParamProject(string projectName)
        {
            string command = "dotnet";
            string createArgument = $@"new {IPParamTemplateName} -o {IPPluginParamProjectPath}{projectName}Param -C {{{Guid.NewGuid()}}}";
            string addToSolutionArgument = $"sln {solutionPath} add {IPPluginParamProjectPath}{projectName}Param\\{projectName}Param.csproj";
            try
            {
                ExecuteCommand(command, createArgument);
                ExecuteCommand(command, addToSolutionArgument);
                return true;
            }
            catch
            {
                return false;
            }
        }
    }
}









<Window x:Class="PluginVerificationApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Plugin Verification" Height="400" Width="600">
    <Grid Margin="10">
        <!-- Main Layout -->
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" /> <!-- For plugin selection -->
            <RowDefinition Height="*" />   <!-- For dynamic input fields -->
            <RowDefinition Height="Auto" /> <!-- For Verify Button -->
        </Grid.RowDefinitions>

        <!-- Plugin Selection -->
        <StackPanel Orientation="Vertical" Grid.Row="0" Margin="0,0,0,10">
            <TextBlock Text="Select Plugin:" FontWeight="Bold" Margin="0,0,0,5" />
            <ComboBox x:Name="PluginComboBox" 
                      SelectionChanged="PluginComboBox_SelectionChanged"
                      Width="200" HorizontalAlignment="Left">
                <!-- Example plugins; replace with dynamic binding -->
                <ComboBoxItem Content="PLPlugin" />
                <ComboBoxItem Content="IPPlugin" />
                <ComboBoxItem Content="AnotherPlugin" />
            </ComboBox>
        </StackPanel>

        <!-- Dynamic Input Fields -->
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <StackPanel x:Name="DynamicInputPanel" Margin="0,0,0,10">
                <!-- Dynamic fields will be added here programmatically -->
            </StackPanel>
        </ScrollViewer>

        <!-- Verify Button -->
        <Button Grid.Row="2" Content="Verify Plugin" Width="120" Height="30" 
                HorizontalAlignment="Right" VerticalAlignment="Center" 
                Click="VerifyPlugin_Click" />
    </Grid>
</Window>

